// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Models list
model Usuarios {
  id                                        Int                                  @id @default(autoincrement())
  usuario                                   String                               @unique @db.VarChar(30)
  apellido                                  String                               @db.VarChar(50)
  nombre                                    String                               @db.VarChar(50)
  dni                                       String                               @db.VarChar(30)
  password                                  String
  email                                     String                               @db.VarChar(50)
  telefono                                  String                               @db.VarChar(50)
  asignableSolicitud                        Boolean?                             @default(false)
  role                                      String?                              @default("ADMIN_ROLE")
  activo                                    Boolean?                             @default(true)
  createdAt                                 DateTime                             @default(now())
  updatedAt                                 DateTime                             @updatedAt
  UsuariosDependencias                      UsuariosDependencias[]               @relation("UsuariosToDependencias")
  OrdenesServicio                           OrdenesServicio[]                    @relation("UsuarioToOrdenesServicio")
  CreatorOrdenesServicio                    OrdenesServicio[]                    @relation("CreatorOrdenServicio")
  CreatorUsuariosDependencias               UsuariosDependencias[]               @relation("CreatorUsuarioDependencia")
  CreatorOrdenesServicioTecnicos            OrdenesServicioToTecnicos[]          @relation("CreatorOrdenesServicioTecnicos")
  CreatorTiposOrdenServicio                 TiposOrdenServicio[]
  CreatorDependencia                        Dependencias[]
  OrdenesServicioTecnicos                   OrdenesServicioToTecnicos[]          @relation("TecnicoOrdenesServicioTecnicos")
  OrdenesServicioHistorial                  OrdenesServicioHistorial[]
  TecnicoOrdenesServicioHistorialToTecnicos OrdenesServicioHistorialToTecnicos[] @relation("TecnicoOrdenesServicioHistorialToTecnicos")
  CreatorOrdenesServicioHistorialToTecnicos OrdenesServicioHistorialToTecnicos[] @relation("CreatorUserOrdenesServicioHistorialToTecnicos")
}

// Dependencias
model Dependencias {
  id                   Int                    @id @default(autoincrement())
  nombre               String                 @unique @db.VarChar(150)
  activo               Boolean?               @default(true)
  creatorUserId        Int?
  creatorUser          Usuarios?              @relation(fields: [creatorUserId], references: [id])
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  UsuariosDependencias UsuariosDependencias[]
  OrdenesServicio      OrdenesServicio[]
}

// Usuarios - Dependencias
model UsuariosDependencias {
  id            Int           @id @default(autoincrement())
  dependenciaId Int?
  dependencia   Dependencias? @relation(fields: [dependenciaId], references: [id])
  usuarioId     Int?
  usuario       Usuarios?     @relation("UsuariosToDependencias", fields: [usuarioId], references: [id])
  soloLectura   Boolean?      @default(false)
  activo        Boolean?      @default(true)
  creatorUserId Int?
  creatorUser   Usuarios?     @relation("CreatorUsuarioDependencia", fields: [creatorUserId], references: [id])
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

// Tipos orden servicio
model TiposOrdenServicio {
  id              Int               @id @default(autoincrement())
  descripcion     String            @unique @db.VarChar(150)
  activo          Boolean?          @default(true)
  creatorUserId   Int?
  creatorUser     Usuarios?         @relation(fields: [creatorUserId], references: [id])
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  OrdenesServicio OrdenesServicio[]
}

// Ordenes de servicio
model OrdenesServicio {
  id                       Int                         @id @default(autoincrement())
  fechaSinAsignar          DateTime                    @default(now())
  fechaEnProceso           DateTime                    @default(now())
  fechaPendiente           DateTime                    @default(now())
  fechaCierre              DateTime                    @default(now())
  tipoOrdenServicioId      Int?
  dependenciaId            Int?
  usuarioId                Int?
  telefonoContacto         String                      @db.VarChar(50)
  observacionSolicitud     String?                     @db.VarChar(500)
  motivoSinSolucion        String?                     @default("") @db.VarChar(500)
  motivoPendiente          String?                     @default("") @db.VarChar(500)
  comentariosSolucion      String?                     @db.VarChar(500)
  estadoOrden              String?                     @default("Sin asignar")
  estadoEquipo             String?                     @default("Funcionando")
  activo                   Boolean?                    @default(true)
  createdAt                DateTime                    @default(now())
  updatedAt                DateTime                    @updatedAt
  creatorUserId            Int?
  tipoOrdenServicio        TiposOrdenServicio?         @relation(fields: [tipoOrdenServicioId], references: [id])
  usuario                  Usuarios?                   @relation("UsuarioToOrdenesServicio", fields: [usuarioId], references: [id])
  creatorUser              Usuarios?                   @relation("CreatorOrdenServicio", fields: [creatorUserId], references: [id])
  dependencia              Dependencias?               @relation(fields: [dependenciaId], references: [id])
  ordenesServicioTecnico   OrdenesServicioToTecnicos[]
  ordenesServicioHistorial OrdenesServicioHistorial[]
}

// OrdenesServicioTecnicos
model OrdenesServicioToTecnicos {
  id              Int              @id @default(autoincrement())
  ordenServicioId Int?
  tecnicoId       Int?
  activo          Boolean?         @default(true)
  creatorUserId   Int?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  creatorUser     Usuarios?        @relation("CreatorOrdenesServicioTecnicos", fields: [creatorUserId], references: [id])
  tecnico         Usuarios?        @relation("TecnicoOrdenesServicioTecnicos", fields: [tecnicoId], references: [id])
  ordenServicio   OrdenesServicio? @relation(fields: [ordenServicioId], references: [id])
}

// OrdenServicioHistorial
model OrdenesServicioHistorial {
  id                                 Int                                  @id @default(autoincrement())
  tipo                               String                               @db.VarChar(150)
  motivoSinSolucion                  String?                              @db.VarChar(500)
  motivoPendiente                    String?                              @db.VarChar(500)
  comentariosSolucion                String?                              @db.VarChar(500)
  activo                             Boolean?                             @default(true)
  creatorUserId                      Int?
  ordenServicioId                    Int?
  createdAt                          DateTime                             @default(now())
  updatedAt                          DateTime                             @updatedAt
  ordenServicio                      OrdenesServicio?                     @relation(fields: [ordenServicioId], references: [id])
  creatorUser                        Usuarios?                            @relation(fields: [creatorUserId], references: [id])
  OrdenesServicioHistorialToTecnicos OrdenesServicioHistorialToTecnicos[]
}

// OrdenServicioHistorialToTecnico
model OrdenesServicioHistorialToTecnicos {
  id                       Int                       @id @default(autoincrement())
  ordenServicioHistorialId Int?
  tecnicoId                Int?
  activo                   Boolean?                  @default(true)
  creatorUserId            Int?
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
  OrdenServicioHistorial   OrdenesServicioHistorial? @relation(fields: [ordenServicioHistorialId], references: [id])
  tecnico                  Usuarios?                 @relation("TecnicoOrdenesServicioHistorialToTecnicos", fields: [tecnicoId], references: [id])
  creatorUser              Usuarios?                 @relation("CreatorUserOrdenesServicioHistorialToTecnicos", fields: [creatorUserId], references: [id])
}
